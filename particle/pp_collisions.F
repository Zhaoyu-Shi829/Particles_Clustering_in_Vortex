      SUBROUTINE PP_COLLISIONS(NPART, XPART, UPART,
     $   DIAMCLASS, DT
#ifdef _PP_SCHMEECKLE_BOUND_
     $   ,NPART_BED, PP_ARRSIZE2D,NBR_BED
#endif
     $   )
C
C     CHECKS FOR ALL COLLISIONS WITHIN DT
C
C     IF TWO PARTICLES WILL COLLIDE, THEIR POSITIONS ALD VELOCITIES ARE CHANGED SUCH THAT
C     AT THE NEXT EULER TIME STEP FOR THE PARTICLE POSITION, THE PARTICLES WILL BE AT THE 
C     CORRECT PLACES, I.E.
C
C     IF P1 AND P2 WILL COLLIDE, THEIR POSITION BEFORE COLLISION IS X1(P1) AND X1(P2)
C     AND THEIR VELOCITY BEFORE COLLISION IS U1(P1) AND U2(P2).
C     AFTER COLLISION, THE PARTICLES WILL BE AT X2(P1) AND X2(P2) AND THEIR VELOCITY
C     WILL BE U2(P1) AND U2(P2) RESP.
C
C     IN THIS SUBROUTINE, THE TWO PARTICLES ARE PLACED AT X2(P1)-DT*U2(P1)
C     AND X2(P2)-DT*U2(P2) BECAUSE THEN, WHEN
C     ADVANCING THE PARTICLES' POSITION BY DT, THEY WILL BE AT THE CORRECT PLACES
C
C
C


      IMPLICIT NONE

#include "../konsta.h"

      INTEGER NPART, DIAMCLASS(NPART)

      REAL XPART(3, NPART), UPART(3,NPART),DT


#ifdef _PP_SCHMEECKLE_BOUND_
      INTEGER NPART_BED, PP_ARRSIZE2D
      INTEGER NBR_BED(PP_ARRSIZE2D)
#endif


c     local vars




      INTEGER IPART1, IPART2, IPART3, IPART11, IPART21
      INTEGER COLLIDX1, COLLIDX2

      REAL DIAM1, DIAM2, DIFFPOS(3), DIFFVEL(3),
     $   COLLTIMEMIN, COLLTIMEMAX, SCALPROD, TIMETOMIN,
     $   PP_PART_DIAMETER, COLLVEC(3)
      LOGICAL LCOLLIDE, LPREST
      INTEGER NCOLLISIONS

#ifdef _PP_SCHMEECKLE_BOUND_
      INTEGER N_NONREST, NBR_NONREST
      ALLOCATABLE NBR_NONREST(:)
      ALLOCATE (NBR_NONREST(NPART-NPART_BED))
#endif

      COLLTIMEMIN=0

      COLLIDX1=1
      NCOLLISIONS=0
      
      
#ifdef _PP_SCHMEECKLE_BOUND_
      N_NONREST=0
      DO IPART1=1,NPART
         LPREST = .FALSE.
         IPART3 = 1
         DO WHILE ((.NOT. LPREST) .AND. (IPART3 .LE. NPART_BED))
            IF (NBR_BED(IPART3) .EQ. IPART1) LPREST = .TRUE.
            IPART3=IPART3+1
         ENDDO
         IF (.NOT. LPREST) THEN
            N_NONREST=N_NONREST+1
            NBR_NONREST(N_NONREST)=IPART1
         ENDIF
      ENDDO
#endif


      DO WHILE (COLLIDX1 .GT. 0)
      COLLIDX1=0
      COLLTIMEMAX=DT

C     FIND COLLIDING PARTICLES
#ifdef _PP_SCHMEECKLE_BOUND_
C     COLLISIONS WITH RESTING PARTICLES ARE TREATED IN PP_SCHMEECKLE_BOUND
      DO IPART11=1,N_NONREST
         IPART1=NBR_NONREST(IPART11)
#else
      DO IPART1=1,NPART
#endif      
         DIAM1=PP_PART_DIAMETER(DIAMCLASS(IPART1))

#ifdef _PP_SCHMEECKLE_BOUND_
C     COLLISIONS WITH RESTING PARTICLES ARE TREATED IN PP_SCHMEECKLE_BOUND
      DO IPART21=IPART11+1,N_NONREST
         IPART2=NBR_NONREST(IPART21)
#else
         DO IPART2 = IPART1+1,NPART
#endif

            DIAM2=PP_PART_DIAMETER(DIAMCLASS(IPART2))
            
            CALL PP_CHECK_COLLISION(XPART(:,IPART1), XPART(:,IPART2),
     $         UPART(:,IPART1), UPART(:,IPART2),
     $         TIMETOMIN, DT, DIAM1, DIAM2, LCOLLIDE)
            
c            IF ((IPART1 .EQ. 9) .AND. (IPART2 .EQ. 55)) THEN
c               WRITE(6,*) "HI"
c            ENDIF

            IF ((IPART2 .NE. IPART1) .AND. (LCOLLIDE)
     $         .AND. (TIMETOMIN .GT. COLLTIMEMIN + SMALL)
     $         .AND. (TIMETOMIN .LE. COLLTIMEMAX)) THEN
                  COLLTIMEMAX = TIMETOMIN
                  COLLIDX1=IPART1
                  COLLIDX2=IPART2
            ENDIF

         ENDDO
      ENDDO



      IF (COLLIDX1 .GT. 0) THEN
         NCOLLISIONS=NCOLLISIONS+1
         COLLTIMEMIN=COLLTIMEMAX
C        DO COLLSISION
         DIFFPOS=XPART(:,COLLIDX1) - XPART(:,COLLIDX2)
         DIFFVEL=UPART(:,COLLIDX1)-UPART(:,COLLIDX2)

         DIAM1=PP_PART_DIAMETER(DIAMCLASS(COLLIDX1))
         DIAM2=PP_PART_DIAMETER(DIAMCLASS(COLLIDX2))
         COLLVEC=(DIFFPOS+COLLTIMEMIN*DIFFVEL)
         COLLVEC=COLLVEC/SQRT(COLLVEC(1)*COLLVEC(1)+COLLVEC(2)
     $      *COLLVEC(2)+COLLVEC(3)*COLLVEC(3))

#ifndef _PP_SCHMEECKLE_BOUND_
C        PARTIKEL KANN NICHT BEWEGT WERDEN WENN KEIN OVERLAPPING ENTSTEHEN SOLL
C        DA SICH NICHT ALLE PARTIKEL GERADEAUS BEWEGEN (1 ODER 2 KONTAKTE -> KREISBAHN)
         XPART(:,COLLIDX1)=XPART(:,COLLIDX1)
     $          +COLLTIMEMIN*UPART(:,COLLIDX1)
         XPART(:,COLLIDX2)=XPART(:,COLLIDX2)
     $          +COLLTIMEMIN*UPART(:,COLLIDX2)
#endif

         SCALPROD=DIFFVEL(1)*COLLVEC(1)
     $         +DIFFVEL(2)*COLLVEC(2)+DIFFVEL(3)*COLLVEC(3)

C        COLLISION FROM FUKAGATAS PDH
C        BEEP: DIAMETER DEPENDENCE NOT FROM LITERATURE!
         DIAM1=DIAM1*DIAM1*DIAM1
         DIAM2=DIAM2*DIAM2*DIAM2



         UPART(:,COLLIDX1)=UPART(:,COLLIDX1)-SCALPROD*COLLVEC*
     $      2*DIAM2/(DIAM1+DIAM2)
         UPART(:,COLLIDX2)=UPART(:,COLLIDX2)+SCALPROD*COLLVEC*
     $      2*DIAM1/(DIAM1+DIAM2)

#ifndef _PP_SCHMEECKLE_BOUND_
         XPART(:,COLLIDX1)=XPART(:,COLLIDX1)
     $      -COLLTIMEMIN*UPART(:,COLLIDX1)
         XPART(:,COLLIDX2)=XPART(:,COLLIDX2)
     $      -COLLTIMEMIN*UPART(:,COLLIDX2)
#endif

      ENDIF


      ENDDO


C     TEST
c     test funktioniert nicht wegen rb
c      XPART=XPART+DT*UPART
c      DO IPART1=1,NPART
c         DIAM1=PP_PART_DIAMETER(DIAMCLASS(IPART1))
c
c         DO IPART2 = 1,NPART
c
c            DIAM2=PP_PART_DIAMETER(DIAMCLASS(IPART2))
c            DIFFPOS=XPART(:,IPART1) - XPART(:,IPART2)
c            SCALPROD=DIFFPOS(1)*DIFFPOS(1)+
c     $         DIFFPOS(2)*DIFFPOS(2)+
c     $         DIFFPOS(3)*DIFFPOS(3)
c            
c            IF ((4.*SCALPROD .LT. (DIAM1+DIAM2)*(DIAM1+DIAM2)) .AND. 
c     $         (IPART1 .NE. IPART2) ) THEN
c               WRITE(6,*) 'PP_COLLISIONS ERROR ', IPART1, IPART2
c               WRITE(6,*) 'XPART1VOR ', 
c     $             XPART(:,IPART1)-DT*UPART(:,IPART1)
c               WRITE(6,*) 'XPART2VOR ', 
c     $             XPART(:,IPART2)-DT*UPART(:,IPART2)
c               WRITE(6,*) 'XPART1NACH ', XPART(:,IPART1)
c               WRITE(6,*) 'XPART12ACH ', XPART(:,IPART2)
c               WRITE(6,*) 'uPART1 ', UPART(:,IPART1)
c               WRITE(6,*) 'uPART2 ', UPART(:,IPART2)
c               WRITE(6,*) 'dt, DIAM ', DT, DIAM1, DIAM2
c               STOP
c            ENDIF
c         ENDDO
c      ENDDO
c      XPART=XPART-DT*UPART


      WRITE(6,*) 'NCOLLSIONS ', NCOLLISIONS

#ifdef _PP_SCHMEECKLE_BOUND_
      DEALLOCATE (NBR_NONREST)
#endif

      RETURN
      END
