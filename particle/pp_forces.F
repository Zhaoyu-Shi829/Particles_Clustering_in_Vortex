      SUBROUTINE PP_FORCES(UPART,UPART_F,DIAM,GMOL,RHO,RHOPART,
     $   FACT_A_W, A_D, A_G,ACCELPART,FORCEPART
#ifdef _PP_SAFFMAN_FORCE_
     $   , ZMIN, ZMAX, XPART, DUDZ
#endif
#ifdef _PP_ADDED_MASS_
     $   , D_UPART_F
#endif
     $   )
C     COMPUTES THE FORCE ACTING ON A PARTICLE

      IMPLICIT NONE


      REAL UPART(3),UPART_F(3),ACCELPART(3),FORCEPART(3),DIAM,GMOL,RHO,
     $   RHOPART,
     $   FACT_A_W, A_D(3), A_G(3)

#ifdef _PP_SAFFMAN_FORCE_
      REAL ZMIN, ZMAX, XPART(3), DUDZ
#endif
#ifdef _PP_ADDED_MASS_
      REAL D_UPART_F(3)
#endif


C     LOCAL VARS

      REAL ACCEL(3)

      INTEGER IPART




      ACCELPART = 0
#ifdef _PP_STOKES_DRAG_
      CALL PP_STOKES_DRAG(UPART,UPART_F,
     $   DIAM,GMOL,RHO,FACT_A_W,
     $   ACCEL)
      ACCELPART=ACCELPART+ACCEL
#endif
#ifdef _PP_FL_ACC_FORCE_
      ACCELPART=ACCELPART+A_D
#endif
#ifdef _PP_SAFFMAN_FORCE_
      CALL PP_SAFFMAN_ACCEL(
     $   GMOL, RHO, ZMIN, ZMAX, 
     $   DIAM, RHOPART,
     $   XPART, UPART, UPART_F, DUDZ,
     $   ACCEL(3))
      ACCELPART(3)=ACCELPART(3)+ACCEL(3)
#endif

      ACCELPART=ACCELPART+A_G

#ifdef _PP_ADDED_MASS_
      ACCELPART=ACCELPART+0.5*RHO/RHOPART*D_UPART_F
      ACCELPART=ACCELPART/(1.+RHO/RHOPART/2.)
#endif


      FORCEPART = 1.0/6.0*3.1415927*DIAM*DIAM*DIAM*RHOPART*ACCELPART


      
      RETURN
      
      END
