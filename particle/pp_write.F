      SUBROUTINE PP_WRITE (CHANNEL,PROC_WRITE)
C--------------------------------------------------------
C
C     WRITES PARTICLE-FILE FOR RESTART
C
C     28.05.03 (FS): ORIGINAL
C     27.04.05 (CG): ERWEITERT UM PART_IDX(I),START_GRID(I), SCALAR_VAL(I)
C
C--------------------------------------------------------


      IMPLICIT NONE

#include "../colevel.h"
#include "../mgpar.h"
#include "pp_particles.h"

#include "mpif.h"
#include "../compi.h"




      INTEGER CHANNEL



      

      INTEGER NGRID, IDTAG, VERSION
      
      PARAMETER (IDTAG=987519784, VERSION=1)


      INTEGER NSECTIONS      
      CHARACTER (LEN=32) SECTIONTYPE, SECTIONNAME

      INTEGER PP_NUM_VARS, PROC_WRITE
      INTEGER IERR

      INTEGER NUMVARS_SOLL
      INTEGER NTOTGRDS,IGRID_NTOTGRDS,IGRID,ILEVEL
      ALLOCATABLE IGRID_NTOTGRDS(:)

      IF (.NOT. PP_LWRITE) RETURN





      

      NUMVARS_SOLL=18

#if defined _PP_SHOT_SGS_ || defined _PP_SIM_SGS_
      NUMVARS_SOLL=NUMVARS_SOLL+3
#endif

#ifdef  _PP_WRITE_UPART_EFF_
      NUMVARS_SOLL=NUMVARS_SOLL+3
#endif

#ifdef _PP_FILTER_APRIORI_
      NUMVARS_SOLL=NUMVARS_SOLL+3
#endif

#ifdef _PP_VEL_FILTER_POS_UNFILTER_
      NUMVARS_SOLL=NUMVARS_SOLL+6
#endif


      
      IF (PP_NUM_VARS() .NE. NUMVARS_SOLL) 
     $   CALL ERRR(508,' PP_WRITE')

C      NGRID=NOFTST(MAXLEVEL)


      ALLOCATE(IGRID_NTOTGRDS(MAXGRIDS))
      NTOTGRDS = 0
      IGRID_NTOTGRDS = 0
      DO ILEVEL=MINLEVEL,MAXLEVEL
       NGRID = NOFTST(ILEVEL)
       DO IGRID=1,NGRID
       NTOTGRDS = NTOTGRDS + 1
       IGRID_NTOTGRDS(NTOTGRDS) = IGRDOFTST(IGRID,ILEVEL)
       ENDDO
      ENDDO




C     only the processor that has the last grid writes
      IF (MYID .EQ. PROC_WRITE) THEN



C     WRITE HEADER
      WRITE(CHANNEL,ERR=2000) IDTAG
      
      WRITE(CHANNEL,ERR=2000) VERSION
      WRITE(CHANNEL,ERR=2000) NPART
      
      WRITE(CHANNEL,ERR=2000) RAND_WALK_MAX

C      WRITE(CHANNEL,ERR=2000) NGRID
      WRITE(CHANNEL,ERR=2000) NTOTGRDS




      ENDIF



      NSECTIONS=2
#ifdef _PP_SCHMEECKLE_BOUND_
      NSECTIONS=NSECTIONS+2
#endif

      IF (MYID .EQ. PROC_WRITE) THEN
      WRITE(CHANNEL,ERR=2000) NSECTIONS
      ENDIF
         


      SECTIONTYPE = 'PARTICLE_ORDERED                '
      IF (MYID .EQ. PROC_WRITE) THEN
      WRITE(CHANNEL,ERR=2000) SECTIONTYPE
      ENDIF
      SECTIONNAME = 'PARTICLE_DATA                   '
      CALL PP_WRITE_SECTION(CHANNEL,PROC_WRITE,NTOTGRDS,1,SECTIONNAME)
C      WRITE(6,*)'NACH W PARTICLE DATA',MYID






      SECTIONTYPE = 'PARTICLE_ORDERED                '
      IF (MYID .EQ. PROC_WRITE) THEN
      WRITE(CHANNEL,ERR=2000) SECTIONTYPE
      ENDIF
      SECTIONNAME = 'RESTING PARTICLES INFO          '
      CALL PP_WRITE_SECTION(CHANNEL,PROC_WRITE,NTOTGRDS,2,SECTIONNAME)
C      WRITE(6,*)'NACH W PARTICLE RESTING',MYID
      




#ifdef _PP_SCHMEECKLE_BOUND_
      SECTIONTYPE = 'PARTICLE_ORDERED                '
      IF (MYID .EQ. PROC_WRITE) THEN
      WRITE(CHANNEL,ERR=2000) SECTIONTYPE
      ENDIF
      SECTIONNAME = 'PARTICLES CONTACT INFO          '
      CALL PP_WRITE_SECTION(CHANNEL,PROC_WRITE,NTOTGRDS,3,SECTIONNAME)
C      WRITE(6,*)'NACH W PARTICLE CONTACT',MYID

      SECTIONTYPE = 'PARTICLE_ORDERED                '
      IF (MYID .EQ. PROC_WRITE) THEN
      WRITE(CHANNEL,ERR=2000) SECTIONTYPE
      ENDIF
      SECTIONNAME = 'PARTICLES BED                   '
      CALL PP_WRITE_SECTION(CHANNEL,PROC_WRITE,NTOTGRDS,3,SECTIONNAME)
C      WRITE(6,*)'NACH W PARTICLE BED',MYID
#endif


      CALL MPI_BARRIER(MPI_WHICH_COMM,IERR)
      WRITE(6,*) 'PP_WRITE DONE'


      RETURN

 2000 CALL ERRR (501,'PP_WRITE')

      END

